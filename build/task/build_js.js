/**
 * Special concat/build task to handle various jQuery build requirements
 * Concats AMD modules, removes their definitions,
 * and includes/excludes specified modules
 */

module.exports = function(grunt) {

    "use strict";

    var fs = require("fs"),
        requirejs = require("requirejs"),
        srcFolder = __dirname + "/src/",
        rdefineEnd = /\}\);[^}\w]*$/,
        mob = grunt.file.readJSON('mob.json'),

        config = {
            baseUrl: "src",
            name: "mob",
            out: "dist/mob.js",
            // We have multiple minify steps
            optimize: "none",
            // Include dependencies loaded with require
            findNestedDependencies: true,
            // Avoid inserting define() placeholder
            skipModuleInsertion: true,
            // Avoid breaking semicolons inserted by r.js
            skipSemiColonInsertion: true,
            wrap: {
                startFile: "src/intro.js",
                endFile: "src/outro.js"
            },
            paths: {

            },
            rawText: {},
            onBuildWrite: convert
        };

    /**
     * Strip all definitions generated by requirejs
     * Convert "var" modules to var declarations
     * "var module" means the module only contains a return
     * statement that should be converted to a var declaration
     * This is indicated by including the file in any "var" folder
     * @param {String} name
     * @param {String} path
     * @param {String} contents The contents to be written (including their AMD wrappers)
     */

    function convert(name, path, contents) {
        var amdName;
        // Convert var modules
        if (/.\/var\//.test(path)) {
            contents = contents
                .replace(/define\([\w\W]*?return/, "var " + (/var\/([\w-]+)/.exec(name)[1]) + " =")
                .replace(rdefineEnd, "");
        } else {
            if (name !== "mob") {
                contents = contents
                    .replace(/\s*return\s+[^\}]+(\}\);[^\w\}]*)$/, "$1")
                // Multiple exports
                .replace(/\s*exports\.\w+\s*=\s*\w+;/g, "");
            }

            // Remove define wrappers, closure ends, and empty declarations
            contents = contents
                .replace(/define\([^{]*?{/, "")
                .replace(rdefineEnd, "");

            // Remove anything wrapped with
            // /* ExcludeStart */ /* ExcludeEnd */
            // or a single line directly after a // BuildExclude comment
            contents = contents
                .replace(/\/\*\s*ExcludeStart\s*\*\/[\w\W]*?\/\*\s*ExcludeEnd\s*\*\//ig, "")
                .replace(/\/\/\s*BuildExclude\n\r?[\w\W]*?\n\r?/ig, "");

            // Remove empty definitions
            contents = contents
                .replace(/define\(\[[^\]]*\]\)[\W\n]+$/, "");
        }

        return contents;
    }

    grunt.registerMultiTask(
        "buildjs",
        "Concatenate source, remove sub AMD definitions, " +
        "(include/exclude modules with +/- flags), embed date/version",
        function() {
            var flag, index,
                done = this.async(),
                flags = this.flags,
                optIn = flags["*"],
                name = this.data.dest,
                minimum = this.data.minimum,
                removeWith = this.data.removeWith,
                excluded = [],
                included = [],
                banner = grunt.config("banner"),
                outFolder = grunt.config('dst.mobjs'),

                excludeList = function(list, prepend) {
                    if (list) {
                        prepend = prepend ? prepend + "/" : "";
                        list.forEach(function(module) {
                            // Exclude var modules as well
                            if (module === "var") {
                                excludeList(
                                    fs.readdirSync(srcFolder + prepend + module), prepend + module
                                );
                                return;
                            }
                            if (prepend) {
                                // Skip if this is not a js file and we're walking files in a dir
                                if (!(module = /([\w-\/]+)\.js$/.exec(module))) {
                                    return;
                                }
                                // Prepend folder name if passed
                                // Remove .js extension
                                module = prepend + module[1];
                            }

                            // Avoid infinite recursion
                            if (excluded.indexOf(module) === -1) {
                                excluder("-" + module);
                            }
                        });
                    }
                },

                excluder = function(flag) {
                    var m = /^(\+|\-|)([\w\/-]+)$/.exec(flag),
                        exclude = m[1] === "-",
                        module = m[2];

                    if (exclude) {
                        // Can't exclude certain modules
                        if (minimum.indexOf(module) === -1) {
                            // Add to excluded
                            if (excluded.indexOf(module) === -1) {
                                grunt.log.writeln(flag);
                                excluded.push(module);
                                // Exclude all files in the folder of the same name
                                // These are the removable dependencies
                                // It's fine if the directory is not there
                                try {
                                    excludeList(fs.readdirSync(srcFolder + module), module);
                                } catch (e) {
                                    grunt.verbose.writeln(e);
                                }
                            }
                            // Check removeWith list
                            excludeList(removeWith[module]);
                        } else {
                            grunt.log.error("Module \"" + module + "\" is a minimum requirement.");

                        }
                    } else {
                        grunt.log.writeln(flag);
                        included.push(module);
                    }
                };



            grunt.log.writeln("start build");
            delete flags["*"];
            for (flag in flags) {
                excluder(flag);
            }


            grunt.verbose.writeflags(excluded, "Excluded");
            grunt.verbose.writeflags(included, "Included");

            if (excluded.length) {
                config.excludeShallow = excluded;
            }
            config.include = included;

            /**
             * @param {String} compiled
             */
            config.out = function(compiled) {

                compiled = compiled
                // Embed banner
                .replace(/@BANNER/g, banner);

                grunt.file.write(name, compiled);
            };

            if (!optIn) {
                config.rawText.jquery = "define([" +
                    (included.length ? included.join(",") : "") +
                    "]);";
            }

            requirejs.optimize(config, function(response) {
                grunt.verbose.writeln(response);
                grunt.log.ok("File '" + name + "' created.");
                done();
            }, function(err) {
                done(err);
            });
        });

    function getAllJSModules() {
        var jses = mob.js;
        var modules = [];
        for (var l in jses) {
            if (jses[l] && jses[l].items) {
                modules = modules.concat(jses[l].items);
            }
        }
        return modules.map(function(m) {
            if (m) {
                return m.name;
            }

        });
    }
    // 
    //
    //
    // grunt customjs:+aside,+slide
    //
    grunt.registerTask("customjs", "自定义js的打包", function() {
        var args = this.args,
            modules = args.length ? args[0].replace(/,/g, ":") : "";
            grunt.log.writeln(modules);
        grunt.task.run(["buildjs:*:*" + (modules ? ":" + modules : ""), 'uglify']);
    });

    /*
     *
     *  打包全部的js模块
     *  grunt distjs
     */

    grunt.registerTask('distjs', '', function() {
        var modules = getAllJSModules();
        modules = '+' + modules.join(':');
        grunt.task.run(["buildjs:*:*" + (modules ? ":" + modules : ""), 'uglify']);

    });
};